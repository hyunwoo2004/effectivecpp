#include<iostream>

// Effective C++
// 4. 설계 및 선언
// 항목 18: 인터페이스 설계는 제대로 쓰기엔 쉽게, 엉터리로 쓰기엔 어렵게 하자

// 일단 적절한 타입만 제대로 준비되어 있으면, 각 타입의 값에 제약을 가하더라도 괜찮은 경우가 생기게 됨
// 예를 들어 월(月)이 가질 수 있는 유효한 값은 12개뿐이므로, Month 타입은 이 사실을 제약으로 사용할 수 있음
// 한 가지 방법으로 월 표시 값을 나타내는 enum을 넣는 방법이 있는데 enum은 수많은 프로그래머의 용감하고 씩씩한 친구로서 시대를 풍미하고 있긴 하지만
// 타입 안전성은 그리 믿음직하지 못함
// 때로는 int처럼 쓰일 수 있다는 사실을 이미 본 바 있음(항목 2 참조)
// 타입 안전성이 신경 쓰인다면 유효한 Month의 집합을 미리 정의해 두어도 괜찮음
class Month {
public:
  static Month Jan() { return Month(1); }                    // 유효한 Month 값을 반환하는 함수들.
  static Month Feb() { return Month(2); }                    // 이들이 어쨰서 함수로 되어 있으며
  ...                                                        // 객체가 되면 안 되는지에 대한
  static Month Dec() { return Month(12); }                   // 이야기는 아래를 보시면 있음.

  ...                                                        // 다른 멤버 함수들
private:
  explicit Month(int m);                                     // Month 값이 새로 생성되지 않도록
                                                             // 명시호출 생성자가 private 멤버임.

  ...                                                        // 월 표현을 위한 내부 데이터
};

Date d(Month::Mar(), Day(30), Year(1995));
// 특정한 월을 나타내는 데 객체를 쓰지 않고 함수를 쓴 것에 대해 필자의 취향이 독특하다고 느낀 사람이 있다면, 그분들 머리 속에는 지우개가 있기 때문임
// 비지역 정적 객체들의 초기화를 믿고 밀고 나가는 것은 그 자체로 문제가 있음! - 항목 4 참고

// 예상되는 사용자 실수를 막는 다른 방법으로는 어떤 타입이 제약을 부여하여 그 타입을 통해 할 수 있는 일들을 묶어 버리는 방법이 있음
// 제약 부여 방법으로 아주 흔히 쓰이는 예가 'const 붙이기'임
// 항목 3에 잘 설명해 놨는데, operator*의 반환 타입을 const로 한정함으로써 사용자가 사용자 정의 타입에 대해 다음과 같은 실수를 저지르지 않도록 가능함

if (a * b = c)                                               // 흑, 나는 원래 비교하려고 그랬던 건데!

// 사실, 이 이야기는 '제대로 쓰기에 쉽고 엉터리로 쓰기에 어려운 타입 만들기'를 위한 또 하나의 일반적인 지침을 쉽게 알려 주려고 일부러 끄집어낸 것임
// 이름하여 '그렇게 하지 않을 번듯한 이유가 없다면 사용자 정의 타입은 기본제공 타입처럼 동작하게 만들지어다'라고 함
// int 등의 타입 정도는 사용자들이 그 성질을 이미 다 알고 있기 떄문에, 우리가 사용자를 위해 만드는 타입도 웬만하면 
// 이들과 똑같이 동작하게 만드는 센스를 갖추라는 의미임
// 위의 문장을 봐도 그렇다. - a 와 b가 int라면 a*b에 대입한다는게 말이 안됨
// 그러니까, int와 궅이 다른 길을 걸어갈 이유가 없다면 우리가 만드는 타입에서도 이게 말이 안 되어야 한다는 거임
// 아리송하면 int의 동작 원리대로 만들자! -> 원문 "When in doubt, as the ints do"
  
int main() 
{
}


