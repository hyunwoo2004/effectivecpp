#include<iostream>

// Effective C++
// 4. 설계 및 선언
// 항목 19: 클래스 설계는 타입 설게와 똑같이 취급하자

// 그럼 우리가 효과적인 클래스를 설계할 때 어떻게 하는가?
// 우리가 직면하게 될 고려사항이 무엇인지부터 파악하는 게 우선임
// 어떤 클래스를 설계하든 간에 사실상 모든 경우에 우리의 후두부를 괴롭힐 질문들을 아래에 모아 봄
// 이들 질문의 대답에 따라 설계를 제한하는 것들이 생기게 되는데, 이 부분 역시 신경 쓰지 않으면 안 됨

// * 고려 사항 *
// 6. 어떤 종류의 타입 변환을 허용할 것인가?
// 우리가 만든 타입은 결국 기존의 수많은 타입들과 어울려야 하는 운명이 짊어짐
// 우리의 타입과 다른 타입 사이에 변환 수단이 있어야 하는가?
// T1 타입의 객체를 T2 타입의 객체로 암시적으로(implicitly) 변환되도록 만들고 싶다면, T1 클래스에 타입 변환 함수를 하나 넣어두던가(이를 테면 operator T2)
// 아니면 인자 한 개로 호출될 수 있는 비명시호출(non-explicit) 생성자를 T2 클래스에 넣어두어야 할 거임
// 명시적(explicit) 타입 변환만 허용하고 싶을 경우에는, 해당 변환을 맡는 별도 이름의 함수를 만들되 
// 타입 변환 연산자 혹은 (인자 하나로 호출될 수 있는) 비명시호출 생성자는 만들지 말아야 할 거임(명시적 변환 및 암시적 변환 함수의 예제는 항목 15 참고)


int main() 
{
} 


