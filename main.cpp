#include<iostream>

// Effective C++
// 2. 생성자, 소멸자 및 대입 연산자
// 항목 7: 다형성을 가진 기본 클래스에서는 소멸자를 반드시 가상 소멸자로 선언하자

// 그 코드는 근본적인 약점(문제점)이 존재함
// 1. getTimeKeeper 함수가 반환하는 포인터가 파생 클래스 객체에 대한 포인터임
// 2. 이 포인터가 가리키는 객체가 사라질 때는 기본 클래스 포인터를 통해 삭제됨
// 3. 기본 클래스에 들어 있는 소멸자가 비가상 소멸자(non-virtual dtor)임

// C++ 규정에 의하면, 기본 클래스 포인터를 통해 파생 클래스 객체가 삭제될 때 
// 그 기본 클래스에 비가상 소멸자가 있으면 프로그램 동작은 미정의 사항으로 되어 있음
// 대부분 파생클래스 부분이 소멸되지 않음
// 정리: getTimeKeeper 함수에서 포인터를 통해 날아오는 AtomicClock 객체는 기본 클래스 포인터를 통해 삭제될 때
//       AtomicClock부분이 저 세상으로 가지 못할 뿐만 아니라 AtomicClock의 소멸자도 실행이 안됨
//       -> 근데 기본 클래스 부분은 소멸 과정이 제대로 끝나므로 결국 반쪽짜리 '부분 소멸(partially destoryed)' 객체가 됨
// 결국은 정상적인 프로그램이 될 수 없음

int main() {

} 

