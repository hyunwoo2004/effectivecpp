#include<iostream>

// Effective C++
// 4. 설계 및 선언
// 항목 19: 클래스 설계는 타입 설게와 똑같이 취급하자

// 그럼 우리가 효과적인 클래스를 설계할 때 어떻게 하는가?
// 우리가 직면하게 될 고려사항이 무엇인지부터 파악하는 게 우선임
// 어떤 클래스를 설계하든 간에 사실상 모든 경우에 우리의 후두부를 괴롭힐 질문들을 아래에 모아 봄
// 이들 질문의 대답에 따라 설계를 제한하는 것들이 생기게 되는데, 이 부분 역시 신경 쓰지 않으면 안 됨

// * 고려 사항 *
// 4. 새로운 타입이 가질 수 있는 적법한 값에 대한 제약은 무엇으로 잡을 것인가?
// 전부는 아니지만, 클래스의 데이터 멤버의 몇 가지 조합 값만은 반드시 유효해야 함
// 이런 조합을 가리켜 클래스의 불변속성(invariant)이라고 하며, 클래스 차원에서 지켜주어야 하는 부분임
// 이 불변속성에 따라 클래스 멤버 함수 안에서 해 주어야 할 에러 점검 루틴이 좌우되는데, 특히 생성자, 대입 연산자, 각종 "쓰기(setter)" 함수는 불변속성에 많이 좌우됨
// 그뿐 아니라 불변속성은 우리의 함수가 발생시키는 예외에도 영향을 미치며, 혹시나 우리가 예외 지정(exception specification)을 쓴다면 그 부분에도 영향을 줌

int main() 
{
}


