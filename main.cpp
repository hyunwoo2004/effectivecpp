#include<iostream>

// Effective C++
// 2. 생성자, 소멸자 및 대입 연산자
// 항목 7: 다형성을 가진 기본 클래스에서는 소멸자를 반드시 가상 소멸자로 선언하자

// 그 코드는 근본적인 약점(문제점)이 존재함
// 1. getTimeKeeper 함수가 반환하는 포인터가 파생 클래스 객체에 대한 포인터임
// 2. 이 포인터가 가리키는 객체가 사라질 때는 기본 클래스 포인터를 통해 삭제됨
// 3. 기본 클래스에 들어 있는 소멸자가 비가상 소멸자(non-virtual dtor)임

// 가상 소멸자를 갖고 있지 않은 클래스를 보면 이렇게 생각하자
// -> "저 클래스는 결코 기본 클래스로 쓰지 않는 거구나."
// 입장을 바꿔보자 - 기본 클래스로 의도하지 않은 클래스에대해 소멸자를 가상으로 선언하는 것은 좋지 않은 정신자세임
// 예시
class Point {                        // 2D 공간의 한 점
public:
  Point(int xCoord, int yCoord);
  ~Point();
private:
  int x, y;
};
// int가 32비트를 차지한다고 가정하면 이 Point 객체는 64비트 레지스터에 딱 맞게 들어 갈 수 있음
// 그리고 C나 포트란(FORTRAN) 등의 다른 언어로 작성된 함수에 넘길 일이 생길 때도 64비트 크기의 자료로 넘어갈 것임
// 그러나 Point클래스의 소멸자가 가상 소멸자로 만들어지는 순간, 사정이 달라짐

int main() {

} 









