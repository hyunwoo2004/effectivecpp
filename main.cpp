#include<iostream>

// Effective C++
// 4. 설계 및 선언
// 항목 18: 인터페이스 설계는 제대로 쓰기엔 쉽게, 엉터리로 쓰기엔 어렵게 하자

// 사용자 쪽에서 뭔가를 외워야 제대로 쓸 수 있는 인터페이스는 잘목 쓰기 쉬움 - 언제라도 잊어버릴 수 있음
// 항목 13에 나온 바 있는 팩토리 함수를 예로 들겠음
// 이 함수는 Investment 클래스 계통에 속해 있는 어떤 객체를 동적 할당하고 그 객체의 포인터를 반환하는 함수임

Investment* createInvestment();                               // 항목 13에서 가져온 함수. 매개변수는
                                                              // 역시 편의상 생략함
// 이 함수를 사용할 떄는, 자원 누출을 피하기 위해 createInvestment에서 얻어낸 포인터를 나중에라도 삭제해야 함
// 그런데 이 점 때문에 사용자가 실수를 최소한 두 가지나 저지를 가능성이 만들어짐
// 1. 포인터 삭제를 깜박 잊을 수 있음
// 2. 똑같은 포인터에 대해 delete를 두 번 이상 적용될 수 있음

int main() 
{
}


