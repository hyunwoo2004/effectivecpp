#include<iostream>

// Effective C++
// 1. C++에 왔으면 C++ 법을 따릅시다.
// 항목 2: #define을 쓰려거든 const, enum, inline을 떠올리자
// -> 다른 말로, '가급적 선행 처리자보다 컴파일러를 더 가까이 하자'이다.

// #define 에서 상수로 교체할 때 주의할 점
// 2. 클래스 멤버로 상수를 정의하는 경우 (클래스 상수를 정의하는 경우) --> 그렇다고 클래스 상수를 #define을 만든다는 생각은 버리
// 어떤 상수의 유효 범위를 클래스로 한정하고자 할 때는 그 상수를 멤버로 만들어야 하는데, 
// 그 상수의 사본 개수가 한 개를 넘지 못하게 하고 싶다면 정적(static) 멤버로 만들어야 함
// 예시
class GamePlayer {
private:
  static const int NumTurns = 5;   // 상수 선언
  int scores[NumTurns];            // 상수를 사용하는 부분
};
// 위에 있는 NumTurns는 선언이다(정의가 아님을 확인!) 정적 멤버로 만들어지는 정수류(int, char, bool 등) 타입의 클래스 내부 상수는 예외
// -> 주소를 취하지 않는 한 선언만 해도 문제는 없음(주소를 취할 시 컴파일러가 정의를 요구하는 경우는 별도로 정의를 제공해야 함)
// 예시
const int GamePlayer::NumTurns; 
// 클래스 상수의 정의는 구현 파일에 둠.
// 중요!: 정의에는 상수의 초기값이 있으면 안됨(클래스 상수의 초기값은 해당 상수가 선언된 시점에서 바로 주어지기 때문)

int main() {
  
}
