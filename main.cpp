#include<iostream>

// Effective C++
// 4. 설계 및 선언
// 항목 18: 인터페이스 설계는 제대로 쓰기엔 쉽게, 엉터리로 쓰기엔 어렵게 하자

// 그래서 항목 13의 이후를 읽어 보면 createInvestment의 반환 값을 auto_ptr이나 tr1::shared_ptr 등의 스마트 포인터에 
// 저장한 후에 해당 포인터를 삭제 작업을 스마트 포인터에게 떠넘기는 방법을 확인할 수 있음
// 하지만 이 스마트 포인터를 사용해야 한다는 사실도 사용자가 잊어버리면 어떻게 하나?
// 차라리 우리가 처음부터 끝까지 문제가 생길 여지를 일망타진해 놓는 편이 좋지 않겠는가?
// 즉, 애초부터 팩토리 함수가 스마트 포인터를 반환하게 만드는 것이다.

std::tr1::shared_ptr<Investment> createInvestment();

// 이렇게 해 두면, 이 함수의 반환 값은 tr1::shared_ptr에 넣어둘 수밖에 없을 뿐더러, 나중에 Investment 객체가 필요 없어졌을 때
// 이 객체를 삭제하는 것을 깜빡하고 넘어가는 불상사도 생기지 않을 거임

// 사실, tr1::shared_ptr을 반환하는 구조는 자원 해제에 관련된 상당수의 사용자 실수를 사전 봉쇄할 수도 있어서 여러모로 인터페이스 설계자에게 좋다.
// 이유는 항목 14에서도 이야기했듯이 tr1::shared_ptr은 생성 시점에 자원 해제 함수(일명 '삭제자')를 직접 엮을 수 있는 기능을 갖고 있기 때문임(auto_ptr에는 없음)

int main() 
{
}


