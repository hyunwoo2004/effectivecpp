#include<iostream>

// Effective C++
// 4. 설계 및 선언
// 항목 18: 인터페이스 설계는 제대로 쓰기엔 쉽게, 엉터리로 쓰기엔 어렵게 하자

// 기본제공 타입과 쓸데없이 어긋나는 동작을 피하는 실질적인 이유는 일관성 있는 인터페이스를 제공하기 위해서임
// 제대로 쓰기엔 괜찮은 인터페이스를 만들어 주는 요인 중에 일관성만큼 똑 부러지는 것이 별로 없으며, 편찮은 인터페이스를 
// 더 나쁘게 만들어 버리는 요인 중에 비일관성을 따라오는 것이 거의 없음
// STL 컨테이너의 인터페이스는 전반적으로(완벽하지 않지만) 일관성을 갖고 있으며, 이 떄문에 사용하는 데 큰 부담이 없음
// 한 예로, 모든 STL 컨테이너에 size란 멤버 함수를 개방해 놓고 있음
// 이 함수는 어떤 컨테이너에 들어 있는 원소의 개수를 알려줌
// 자바의 경우, 배열에 대해선 length 프로퍼티(property)를 사용하고, String에 대해선 
// length 메서드(method)를 불러야 하며 List에 대해서는 size 메서드를 쓰도록 되어 있음
// 닷넷(.NET)은 어떤가?
// Array에서 이런 용도로 개방해 놓은 프로퍼티의 이름은 length인데, Arraylist에서 원소 개수를 세는 프로퍼티의 이름은 Count임

int main() 
{
}


