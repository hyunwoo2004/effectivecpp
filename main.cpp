#include<iostream>

// Effective C++
// 2. 생성자, 소멸자 및 대입 연산자
// 항목 7: 다형성을 가진 기본 클래스에서는 소멸자를 반드시 가상 소멸자로 선언하자

// 정리: 추상 클래스가 될 클래스에 순수 가상 소멸자를 만들자!
class AWOV {             // AWOV = "Abatract w/o Virtuals"
public:
  virtual ~AWOV() = 0;   // 순수 가상 소멸자를 선언함
};
// 이 클래스에서 주의할 점
// 순수 가상 소멸자는 정의할 수 없음
AWOV::~AWOV() {}         // 순수 가상 소멸자의 정의 - 하면 안됨!!!
// 소멸자가 동작하는 순서
// -> 상속 계통 구조에서 가장 밑단에 있는 파생 클래스의 소멸자가 먼저 호출되는 것을 시작으로, 
//    기본 클래스 쪽으로 거쳐 올라가면서 각 기본 클래스의 소멸자가 하나씩 호출됨
//    컴파일러는 ~AWOV의 호출 코드를 만들기 위해 파생 클래스의 소멸자를 사용할 것이므로, 
//    잊지 말고 이 함수의 본문을 준비해 두어야 함 (잊으면 링크 에러를 맛보게 됨)
// + 기존 클래스의 손에 가상 소멸자를 쥐어 주자는 규칙은 다형성(polymorphic)을 가진 기본 클래스, 
//    그러니까 기본 클래스의 인터페이스를 통해 파생 클래스 타입의 조작을 허용하도록 설계된 기본 클래스에만 적용된다는 사실을 알자!

int main() {

}          
