#include<iostream>

// Effective C++
// 3. 자원 관리
// 항목 16: new 및 delete를 사용할 떄는 형태를 반드시 맞추자

// 우리가 new 연산자를 사용해서 표현식을 꾸미게 되면(즉, new로 어떤 객체를 동적 할당하면), 이로 인해 두가지의 내부 동작이 진행됨
// 1. 메모리가 할당됨(이때 operator new라는 이름의 함수가 쓰임. 항목 49, 51 참조)
// 2. 할당된 메모리에 대해 한 개 이상의 생성자가 호출됨
// delete 표현식을 쓸 경우에는(즉, delete 연산자를 사용할 때는) 또 다른 두 가지의 내부 동작이 진행되는데,
// 1. 기존에 할당된 메모리에 대해 한 개 이상의 소멸자가 호출되고, 
// 2. 그 메모리가 해제됨(이때 operator delete라는 함수가 쓰임. 항목 51 참조)
// 여기서 질문!! = delete 연산자가 적용되는 객체는 대체 몆 개나 되는가? - 바로 이 질문의 답이 '소멸자가 호출되는 횟수'가 됨

// 질문이 좀 복잡할 수도 있어 좀 풀어서 말하겠음 -> 삭제되는 포인터는 객체 하나만 가리키는가? 아니면 객체의 배열을 가리키는가?
// 이것이 진짜 핵심인데, 왜냐하면 (new로 힙에 만들어진) '단일 객체'의 메모리 배치구조(layout)는 '객체 배열'에 대한 메모리 구조'와 다르기 때문임
// 특히, 배열을 위해 만들어지는 힙 메모리에는 대개 배열원소의 개수가 박혀 들어간다는 검이 가장 결정적인데,
// 이 떄문에 delete 연산자는 소멸자가 몇번 호출될지를 쉽게 알 수 있음
// 반면, 단일 객체용 힙 메모리는 이런 정보가 없음

int main() 
{

}



