#include<iostream>

// Effective C++
// 4. 설계 및 선언
// 항목 18: 인터페이스 설계는 제대로 쓰기엔 쉽게, 엉터리로 쓰기엔 어렵게 하자

// C++에서는 발에 치이고 손에 잡히는 것이 인터페이스임.
// 함수도 클래스도 템플릿도 모두 인터페이스임
// 인터페이스는 사용자가 우리의 코드와 만리장성을 쌓는 접선수단임
// 우리의 제품을 사용하는 사용자가 뭐 혹시 사외에 불만이 많은 사람이 아니라면, 사용자는 어쨌든 작업 한 법 제대로 하고 싶어 하는 게 당연할 거임
// -> 우리가 만든 인터페이스를 똑바로 쓰고 싶을 거란 말임
// 그러니까, 행여 잘못 사용했을 경우에 우리의 인터페이스가 최소한 항의의 몸부림이라도 보여주는 것은 어떻게 보면 의무임
// 이상적으로는, 어떤 인터페이스를 어떻게 써 봤는데 결과 코드가 사용자가 생각한 대로 동작하지 않는다면 그 코드는 컴파일이 되지 않아야 함
// 거꾸로 생각해서, 어떤 코드가 컴파일된다면 그 코드는 사용자가 원하는 대로 동작해야 할 거임

// '제대로 쓰기에 쉽고 엉터리로 쓰기에 어려운' 인터페이스를 개발하려면 우선 사용자가 저지를 만한 실수의 종류를 머리에 넣어두고 있어야 함
// 예시: 날짜를 나타내는 어떤 클래스에 넣을 생성자를 설계하고 있다고 가정하자
class Date {
public:
  Date(int month, int day, int year);
  ...
};
// 첫인상이 그리 고약하지 않은 인터페이스임
// 별 문제는 없을 것 같음(최소한 미합중국에서는 말임)
// 그런데 여기에는 사용자가 쉽게 저지를 수 있는 오류 구멍이 적어도 두 개나 나 있음
// 우선 매개변수의 전달 순서가 잘못될 여지가 열려 있는 것이 첫 번쨰임
Date d(30, 3, 1995);                                                    // 허걱! "3, 30"이어야 하는데 "30, 3"을 넣음
// 두 번째는 월과 일이 해당하는 숫자가 어이없는 숫자일 수 있음
Date d(3, 40, 1995);                                                    // 쩝, "3, 30"이어야 하는데 "3, 40"을 넣음
// (마지막 예제로 든 코드는 사실 어이없어 보일 수 있겠지만, 키보드에서 3 옆에 4가 있다는 점을 떠올려 보념 꼭 그런 것은 아님.
//  키를 처다 보면 '하나 살짝 비껴가는' 타자 실수는 드물지 않음)

int main() 
{

}



