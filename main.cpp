#include<iostream>

// Effective C++
// 3. 자원 관리
// 항목 13: 자원 관리에는 객체가 그만!

// 투자를 모델링해 주는 클래스 라이브러리를 가지고 어떤 작업을 한다고 가정해보자!
// 이 라이브러리는 Investment 라는 최상위 클래스가 있고, 이것을 기본으로 하여 구체적인 형태의 투자 클래스가 파생되어 있음
// 예시
class Investment { ... }:                          // 여러 형태의 투자를 모델링한
                                                   // 클래스 계통의 최상위 클래스
// 가정을 하나 더 하겠음 - 이 라이브러리는 Investment에서 파생된 클래스의 객체를 사용자가 얻어내는 용도로 팩토리 함수(항목 7 참조)
//                        만을 쓰도록 만들어짐
// 예시
Investment* createInvestment();                    // Investment 클래스 계통에 속한
                                                   // 클래스의 객체를 동적 할당하고
                                                   // 그 포인터를 반환함
                                                   // 이 객체의 해제는 호출자 쪽에서 직접
                                                   // 해야 함
                                                   // (매개변수는 복잡하니까 뺌.)
// 주석문에 나와있듯이, createInvestment 함수를 통애 얻어낸 객체를 사용할 일이 이제 없을 때 그 객체를 삭제해야 하는 쪽은 이 함수의 호출자(caller)임
// 그렇게 쓰라고 만든 만큼, 따라 주는 것이 당연한 것임 함수 f는 그렇게 만들어짐
// 예시
void f() 
{
  Investment* pInv = createInvestment();           // 팩토리 함수를 호출함

  ...                                              // pInv를 사용함

  delete pInv;                                     // 객체를 해제함
}
// 멀쩡해 보이지만, createInvestment 함수로부터 얻은 투자 객체의 삭제에 실패할 수 있는 경우가 세상에 한두 가지가 아님!
// 1. '...'부분 어딘가에서 '도중하차' return 문이 들어갈 가능성
// -> 이 문장이 실행되면 프로그램의 제어가 delete 문까지 도달하지 않음
// 2. createInvestment 호출문과 delete가 하나의 루프 안에 들어 있고 continue 혹은 goto문에 의해 갑작스레 루프로부터 빠져나왔을 때
// -> 1번과 비슷함
// 3. '...'안의 어떤 문장에서 예외를 던질 수 있음
// -> 예외가 던져지면 delete 문이 실행되지 않음
// ==> delete문을 건너뛰는 경우는 여러가지 이지만 결과는 똑같음 - 투자 객체를 담고 있는 메모리가 누출되고, 
//                                                               그와 동시에 그 객체가 갖고 있던 자원까지 모두 샘

int main() 
{

}


