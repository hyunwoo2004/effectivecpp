#include<iostream>

// Effective C++
// 2. 생성자, 소멸자 및 대입 연산자
// 항목 11: operator=에서는 자기대입에 대한 처리가 빠지지 않도록 하자

//   뒤 항목들(13, 14)에 따른다면 우리는 자원 관리 용도로 항상 객체를 만들어야 할 것이고, 이렇게 만든 자원 관리 객체들이 복사될 때
// 나름대로 잘 동작하도혹 코딩할 게 분명함 -> 이때 조심해야 하는 것이 대입 연산자임
// 이 연산자는 우리가 신경쓰지 않아도 자기대입에 대해 안전하게 동작해야 함
// 그러나 자원관리를 우리의 가녀린 섬섬옥수로 완벽하게 하기란 참으로 거친 일임
// 어쩌다 보면 자원을 사용하기 전에 덜컥 해제해 버릴 수 있음!!
// 예시 - 동적 할당된 비트맵을 가리키는 원시 포인터를 데이터 멤버로 갖는 클래스 
class Bitmap { ... };

class Widget {
  ...
private:
  Bitmap* pb;                             // Free store에 할당한 객체를 가리키는 포인터
};

int main() 
{

}


