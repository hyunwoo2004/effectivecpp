#include<iostream>

// Effective C++
// 3. 자원 관리
// 항목 12: 객체의 모든 부분을 빠짐없이 복사하자

// 서론
// 프로그래밍 분야에서 자원(resource)이란, 사용을 일단 마치고 난 후엔 시스템에 돌려주어야 하는 모든 것을 일컫음
// 돌려주지 않은 순간부터 암울한 일들이 뽀송뽀송 피어나기 시작할 것임
// C++ 프로그램에서 가장 흔하게 눈에 밝히는 자원이라면 동적 할당한 메모리를 들 수 있는데 
// -> 사실 메모리는 여러분이 관리해야 하는 많고 많은 자원 중 한가지일 뿐임
// 자원에는 파일 서술자 (file descriptor), 뮤텍스 잠금 (mutex lock)
// 그래픽 유저 인터페이스(GUI: Graphical User Interface)에서 쓰이는 폰트(font)와 브러시(brush)
// 이들 모두 자원에 해당됨 (뿐만 아니라 데이터베이스 연결, 네트워크 소켓도 자원에 해당함)
// 사실 무엇이 자원이냐하는 것은 차차 알아가도 상관없음
// 진짜 중요한 것은 "어쨌든 가져와서 다 썼으면 해제해야, 즉 놓아 주어야 한다"는 사실임
// 이것을 수작업으로 제대로 해 주기란 어떤 상황에서도 그리 녹녹치 않은 일임
// 하지만 예외 발생도 고려해야 하고, return문이 여러 개 들어 있는 함수도 만들어야 하는데다가,
// 이런 것들이 바뀔 때 어떤 결과가 만들어지는지 제대로 모르는 유지보수 프로그래머가 우리 프로그램을 고치는 경우까지 생각하다 보면
// "에라 모르겠다. 되는 대로 하자"식의 자원 관리 방법은 몇 퍼센트 부족한 사람들이 하는 일이란 점은 분명함
// 이번 장은 순도 100% 객체 기반 방식의 자원 관리를 보여주는 것으로 시작함
// C++가 지원하는 생성자, 소멸자, 객체 복사 함수를 사용하는 방법임
// 이 방법을 기회가 닿는 대로 써먹는 버릇을 들이면 어지간한 자원 관리 문제는 모두 박멸할 수 있음은 많은 이들의 경험으로 증명된 바 있음
// 그 다음에는 몇 개의 항목을 할애해서 메모리 관리를 집중적으로 조명해 봄
// 일반적인 메모리 관리 방법을 앞의 항목들에 싣고, 특수 사항에 대해 보충하는 내용을 뒤의 항목들에서 다룰 것임
// 메모리를 관리하는 객체가 메모리를 적절히 처리하는 방법을 알아야 하기 때문

int main() 
{

}


